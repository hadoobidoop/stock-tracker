# .github/workflows/deploy.yml

name: Deploy Python-Worker and Spring-API to EC2

# 1. 워크플로우 실행 조건: main 브랜치에 코드가 푸시될 때
on:
  push:
    branches:
      - main
  workflow_dispatch:
    
jobs:
  # ==========================================================
  # Job 0: 어떤 파일이 변경되었는지 확인하는 사전 작업
  # ==========================================================
  check-changes:
    runs-on: ubuntu-latest
    # 이 Job의 결과를 다른 Job에서 사용할 수 있도록 outputs 설정
    outputs:
      run_python_job: ${{ steps.filter.outputs.python }}
      run_spring_job: ${{ steps.filter.outputs.spring }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # dorny/paths-filter 액션을 사용하여 변경된 파일 경로 필터링
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python:
              - 'stock-bot/**'
            spring:
              - 'stock-api/**'

  # ==========================================================
  # Job 1: 파이썬 워커 배포
  # ==========================================================
  deploy-python-worker:
    needs: check-changes
    if: needs.check-changes.outputs.run_python_job == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1. Docker Hub 로그인 (또는 AWS ECR)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2. Docker 이미지 빌드 및 푸시
      - name: Build and push Python worker image
        uses: docker/build-push-action@v5
        with:
          context: ./stock-bot
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/stock-bot:latest

      # 3. EC2에 접속하여 서비스 업데이트 명령
            # [수정됨] EC2 배포 스크립트
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # --- [최종 수정] EC2에서는 이제 git을 사용하지 않습니다 ---
            
            # 1. 프로젝트 경로 변수 설정 및 디렉토리 생성
            PROJECT_PATH="/home/${{ secrets.EC2_USERNAME }}/stock-analysis-system"
            mkdir -p $PROJECT_PATH/stock-bot # .env 파일을 저장할 디렉토리 생성
            
            # 2. GitHub Secret의 내용으로 .env 파일 동적 생성
            echo "${{ secrets.ENV_STOCK_BOT }}" > $PROJECT_PATH/stock-bot/.env
            
            # 3. Docker Hub에서 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/stock-bot:latest
            
            # 4. docker-compose.yml 파일이 있는 위치로 이동하여 서비스 재시작
            cd $PROJECT_PATH
            docker compose up -d --no-deps stock-bot
            
  deploy-compose-file:
    # 이 Job은 python이나 spring 코드가 변경될 때 항상 실행되어
    # compose 파일의 변경사항도 함께 반영되도록 합니다.
    needs: check-changes
    if: needs.check-changes.outputs.run_python_job == 'true' || needs.check-changes.outputs.run_spring_job == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml" # 리포지토리 루트의 파일을
          target: "/home/${{ secrets.EC2_USERNAME }}/stock-analysis-system/" # EC2의 대상 경로로 복사

  # ==========================================================
  # Job 2: 스프링 API 서버 빌드 및 배포
  # ==========================================================
#  deploy-spring-api:
#    needs: check-changes
#    if: needs.check-changes.outputs.run_spring_job == 'true'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'corretto'
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./stock-api/gradlew
#      - name: Build Spring Boot with Gradle
#        run: ./stock-api/gradlew -p ./stock-api/ build
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build and push Spring API image to Docker Hub
#        uses: docker/build-push-action@v5
#        with:
#          context: ./stock-api # ./stock-api 디렉토리의 Dockerfile 사용
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/stock-api:latest
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script: |
#             PROJECT_PATH="/home/${{ secrets.EC2_USERNAME }}/stock-analysis-system"
#            mkdir -p $PROJECT_PATH/stock-api
#
#            echo "${{ secrets.ENV_STOCK_API }}" > $PROJECT_PATH/stock-api/.env
#
#            docker pull ${{ secrets.DOCKER_USERNAME }}/stock-api:latest
#
#            cd $PROJECT_PATH
#            docker compose up -d --no-deps stock-api